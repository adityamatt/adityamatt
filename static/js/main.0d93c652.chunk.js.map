{"version":3,"sources":["containers/logo.svg","store/actions/actionTypes.ts","store/selectors/testSelector.ts","components/TestComponent.tsx","store/actions/testActions.ts","containers/App.tsx","reportWebVitals.ts","store/reducers/testReducer.ts","store/reducers/rootReducer.ts","store/store.ts","index.tsx"],"names":["TEST_ACTION","getTestValue","createSelector","state","test","testState","testValue","TestComponent","dispatch","useDispatch","useSelector","Container","process","Button","variant","onClick","updatedValue","a","type","payload","App","props","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultTestState","rootReducer","combineReducers","action","middlewares","thunk","store","createStore","reducers","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"8LAAe,G,MAAA,IAA0B,kC,yDCA5BA,EAAc,c,QCKdC,EAAeC,aAFV,SAACC,GAAD,OAAgCA,EAAMC,QAEF,SAACC,GACrD,OAAOA,EAAUC,a,OCAZ,SAASC,IACd,IAAMC,EAAWC,cAIXH,EAAYI,YAAYT,GAC9B,OACE,8BACE,eAACU,EAAA,EAAD,WACE,8BAAML,IACN,8BAAMM,gBACN,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QATZ,WCAE,IAACC,EDCvBR,GCDuBQ,EDCH,gBCAtB,uCAAO,WAAOR,GAAP,SAAAS,EAAA,sDACLT,EAP8C,CAChDU,KAAMlB,EACNmB,QAK2BH,IADpB,2CAAP,yDDQM,+BEZD,IAiBQI,EAjBI,SAACC,GAClB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,+CADP,0BAGA,mBAAGH,UAAU,WAAWI,KAAK,sBAAsBC,OAAO,SAASC,IAAI,sBAAvE,yBAGA,cAACrB,EAAD,UCFOsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCHRQ,EAAmC,CACvChC,UAAW,kBCJb,IAIeiC,EAJKC,YAAgB,CAClCpC,KDMa,WAA6F,IAAxED,EAAuE,uDAA/CmC,EAAkBG,EAA6B,uCACzG,OAAQA,EAAOvB,MACb,KAAKlB,EACH,MAAO,CACLM,UAAWmC,EAAOtB,SAEtB,QACE,OAAOhB,MEZPuC,EAA4B,CAACC,K,QCK3BC,EDDC,CAAEA,MADKC,YAAYC,EAAUC,IAAe,WAAf,EAAmBL,KCEjDE,MAERI,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SAS1BtB,M","file":"static/js/main.0d93c652.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const TEST_ACTION = 'TEST_ACTION'\r\n","import { createSelector } from 'reselect'\r\nimport { ReduxTestState } from '../reducers/testReducer'\r\n\r\nconst testState = (state: any): ReduxTestState => state.test\r\n\r\nexport const getTestValue = createSelector(testState, (testState: ReduxTestState) => {\r\n  return testState.testValue\r\n})\r\n","import * as React from 'react'\r\nimport { Button, Container } from '@material-ui/core'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { testAction } from '../store/actions/testActions'\r\nimport { getTestValue } from '../store/selectors/testSelector'\r\n\r\nexport function TestComponent() {\r\n  const dispatch = useDispatch()\r\n  const buttonClicked = () => {\r\n    dispatch(testAction('UPDATED VALUE'))\r\n  }\r\n  const testValue = useSelector(getTestValue)\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <div>{testValue}</div>\r\n        <div>{process.env.REACT_APP_TEST}</div>\r\n        <Button variant=\"contained\" onClick={buttonClicked}>\r\n          Update Value\r\n        </Button>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","import { TEST_ACTION } from './actionTypes'\r\nimport { Dispatch } from 'redux'\r\n\r\nexport const updateTestValue = (payload: any) => ({\r\n  type: TEST_ACTION,\r\n  payload,\r\n})\r\n\r\nexport const testAction = (updatedValue: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    dispatch(updateTestValue(updatedValue))\r\n  }\r\n}\r\n","import * as React from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport { TestComponent } from '../components/TestComponent'\r\n\r\nexport const App = (props: any) => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Learn React\r\n        </a>\r\n        <TestComponent />\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { TEST_ACTION } from '../actions/actionTypes'\r\n\r\nexport interface ReduxTestState {\r\n  testValue: string\r\n}\r\n\r\nconst defaultTestState: ReduxTestState = {\r\n  testValue: 'STARTING VALUE',\r\n}\r\n\r\nexport default function testReducer(state: ReduxTestState = defaultTestState, action: any): ReduxTestState {\r\n  switch (action.type) {\r\n    case TEST_ACTION:\r\n      return {\r\n        testValue: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport test from './testReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  test,\r\n})\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducers from './reducers/rootReducer'\r\nimport { Middleware } from 'redux'\r\n\r\nconst middlewares: Middleware[] = [thunk]\r\n\r\nexport default () => {\r\n  const store = createStore(reducers, applyMiddleware(...middlewares))\r\n  return { store }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './containers/App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store/store'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\ndeclare let module: any\r\nconst { store } = configureStore()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\nif (module.hot) {\r\n  module.hot.accept()\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}